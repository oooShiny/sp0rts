<?php

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupRelationship;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;

function sports_moderation_theme($existing, $type, $theme, $path) {
  return [
    'sports_moderation_block_link' => [
      'variables' => [
        'url' => '',
        'title' => ''
      ]
    ]
  ];
}
/**
 * Implements hook_entity_presave().
 */
function sports_moderation_entity_presave(EntityInterface $entity) {
  // Check posts against group filters.
  $type = $entity->getEntityTypeId();

  // Don't check autogenerated content.
  if ($type == 'node' && (in_array($entity->bundle(), ['game', 'tweet', 'reddit_post']) ||
      $entity->getOwnerId() == 1)) {
    $uid = $entity->getOwnerId();
    return;
  }
  $check_types = [
    'node',
    'comment',
  ];
  if (in_array($type, $check_types)) {
    // Group content should always have the group ID in the URL.
    $group = _get_group($entity, $type);
    // Get all filters for this group.
    foreach ($group->get('field_automod_filters')->referencedEntities() as $filter) {
      // Check the filters: does the entity type match?
      $filter_type = $filter->get('field_filter_type')->value;
      if (
        ($type == 'node' && $filter_type == 'post') ||
        ($type == 'comment' && $filter_type == 'comment')
      ) {
        _moderate_content($filter, $entity);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function sports_moderation_preprocess_node(&$variables) {
  $node = $variables['node'];
  // Set the background to red and add a message if the content has been flagged
  // or removed.
  if ($node->isLatestRevision()) {
    $mod_state = $node->get('moderation_state')->value;
    if ($mod_state == 'removed' || $mod_state == 'flagged') {
      $messenger = \Drupal::messenger();
      $messenger->addError('This content has been ' . $mod_state . '.');
      $mod_state .= ' bg-red-900';
    }
    $variables['mod_state'] = $mod_state;
  }
}

/**
 * Implements hook_form_alter().
 */
function sports_moderation_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'sports_moderation_node_form_submit';
}

/**
 * Check if user has been banned from posting in this group.
 */
function sports_moderation_node_form_submit($form, FormStateInterface $form_state) {
  $user = User::load(\Drupal::currentUser()->id());
  if ($user->field_group_post_ban->isEmpty()) {
    return;
  }
  // Get the group this is being added to.
  if(preg_match('{^/group/(\d+)/content/create/group_node%3A(.*)$}', \Drupal::request()->getRequestUri(), $matches)) {
    $group_id = $matches[1];
    foreach ($user->get('field_group_post_ban')->getValue() as $group_ban) {
      if ($group_ban['target_id'] == $group_id) {
        $form_state->setErrorByName('form', 'You are currently banned from posting to this group.');
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function sports_moderation_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'sports_moderation_comment_form_submit';
}

/**
 * Check if user has been banned from posting in this group.
 */
function sports_moderation_comment_form_submit($form, FormStateInterface $form_state) {
  $user = User::load(\Drupal::currentUser()->id());
  if ($user->field_group_comment_ban->isEmpty()) {
    return;
  }
  // Get the group this is being added to.
  if(preg_match('{^/comment/reply/node/(\d+)/comment$}', $form['#action'], $matches)) {
    $group_rel = GroupRelationship::loadByEntity(Node::load($matches[1]));
    $group = end($group_rel);
    $group_id = $group->getGroup()->id();
    foreach ($user->get('field_group_comment_ban')->getValue() as $group_ban) {
      if ($group_ban['target_id'] == $group_id) {
        $form_state->setErrorByName('form', 'You are currently banned from commenting in this group.');
      }
    }
  }
}

/**
 * Function to get the group from the current path.
 */
function _get_group($entity, $type) {
  if ($type == 'node') {
    $current_path = explode('/', \Drupal::service('path.current')->getPath());
    $group = Group::load($current_path[2]);
    if (!$group) {
      $group_rel = GroupRelationship::loadByEntity($entity);
      $rel = end($group_rel);
      return $rel->getGroup();
    }
  }
  else {
    $comment_node = Node::load($entity->get('entity_id')->target_id);
    $group_rel = GroupRelationship::loadByEntity($comment_node);
    $rel = end($group_rel);
    return $rel->getGroup();
  }
  return $group;
}


function _moderate_content($filter, $entity) {
  // Break the filter field into lines to process each one.
  $filter_lines = explode("\r\n",$filter->get('field_content_to_filter')->value);
  foreach ($filter_lines as $regex_filter) {
    // If the text matches, automod.
    if (
      preg_match($regex_filter, $entity->label()) || // Check the title.
      preg_match($regex_filter, $entity->body->value) // Check the body.
    ) {
      // If the "send mod note" checkbox is checked, add a message.
      if ($filter->get('field_send_mod_note')->value == 1) {
        $mod_note = $filter->get('field_mod_note')->value;
        $messenger = \Drupal::messenger();
        $messenger->addError($mod_note);
      }
      $mod_state = $filter->get('field_set_content_to')->value;
      if (!is_null($mod_state)) {
        $entity->set('moderation_state', $mod_state);;
      }
    }
  }
}
