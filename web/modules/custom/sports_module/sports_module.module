<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;

function sports_module_theme($existing, $type, $theme, $path) {
    return [
        'sports_group_tree' => [
            'variables' => [
                'groups' => ''
            ]
        ],
        'sports_group_link' => [
            'variables' => [
                'url' => '',
                'title' => ''
            ]
        ],
      'sports_group_mod_apply' => [
        'variables' => [
          'url' => ''
        ]
      ]
    ];
}

function sports_module_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  $result = AccessResult::neutral();
  if ($field_definition->getName() == 'field_popularity') {
    if ($operation == 'edit' && !in_array('administrator', $account->getRoles())) {
      $result = AccessResult::forbidden();
    }
  }
  return $result->addCacheContexts(['user.roles:administrator']);
}

function sports_module_private_message_view_alter(array &$build, EntityInterface $privateMessage, $viewMode) {
  // Create a new class specific to the author of the message.
  $class = 'private-message-author-' . $privateMessage->getOwnerId();
  // Add the class to the wrapper.
  $build['wrapper']['#attributes']['class'][] = $class;
  $build['wrapper']['#attributes']['class'][] = 'tw-p-10 tw-w-screen';
  if (in_array('private-message-author-other', $build['wrapper']['#attributes']['class'])) {
    $build['wrapper']['#attributes']['class'][] = 'tw-flex tw-gap-3 tw-justify-end';
  }
  $self_message_css = 'tw-flex tw-gap-3 tw-justify-end tw-w-screen';
}