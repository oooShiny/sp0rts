{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}

{{ attach_library('tailwindcss/game-comment') }}

<article{{ attributes.addClass('node') }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  <div{{ content_attributes.addClass('node-content') }}>
{#    {{ content }}#}
    <div class="flex justify-evenly">
      <div class="text-center">
        <img src="{{ t1_logo }}" alt="Team 1 Logo" class="h-16 m-auto w-16">
        {{ content.field_team_1 }}
        ({{ t1_record }})
      </div>
      <div class="text-center">
        <img src="{{ t2_logo }}" alt="Team 2 Logo" class="h-16 m-auto w-16">
        {{ content.field_team_2 }}
        ({{ t2_record }})
      </div>
    </div>

    <div class="border p-2 mx-auto lg:w-1/5">
      {{ content.field_game_date }}
      {{ content.field_venue }}
      <div>{{ weather }} ({{ temp }}Â°F)</div>
      <div>{{ favorite }} favored by {{ line }}</div>
    </div>
  </div>

  {% if is_admin %}
  <div class="bg-red-400 border border-red-500 m-2 p-2 text-black">
    <h3>Admin Links:</h3>
    <ul>
      <li><a href="{{ content.field_espn_endpoint }}">{{ content.field_espn_endpoint }}</a></li>
    </ul>
  </div>
  {% endif %}
  {# Delay slider #}
  <div class="md:w-1/3 m-auto text-center border p-4">
    <p>Set a delay to match new plays to your TV feed:</p>
    <input id="delay-range" class="w-full py-2" type="range" value="0" min="0" max="60">
    <p>
      <span id="delay"></span> second delay
    </p>
  </div>
  <script>
    const slider = document.getElementById("delay-range");
    const output = document.getElementById("delay");
    output.innerHTML = slider.value;

    // Update the current slider value (each time you drag the slider handle)
    slider.oninput = function() {
      output.innerHTML = this.value;
    }
    // Check the latest plays to see if they should be hidden or shown.
    const timer = setInterval(function (){
      let plays = document.querySelectorAll('#comments-list > div.hidden')
      plays.forEach(element => {
        let playTime = +element.dataset.timestamp;
        let slideTime = +slider.value;
        let delay = playTime + slideTime;
        let now = Math.floor(Date.now() / 1000);
        if (delay < now) {
          element.classList.remove('hidden');
        }
      })
    }, 1000)
  </script>

  <div class="comments-list" id="comments-list">
    {# Comment template for plays. #}
    <script id="play-comment-template" type="text/x-template">
      <div class="text-center bg-sky-800 scored-[[play_scored]] type-[[play_type]]" data-timestamp="[[play_timestamp]]">
        <div property="schema:text"><h4>[[play_title]]</h4>
          <p class="py-2">
            <span class="play-quarter border p-1">Q[[play_quarter]]</span>
            <span class="play-time border p-1">[[play_time]]</span>
          </p>
          <div class="gap-5 md:gap-10 flex gap-5 justify-center">
            <img class="h-20" src="[[play_t1_logo]]" alt="">
            <span class="pt-0 leading-relaxed text-5xl">[[play_score]]</span>
            <img class="h-20" src="[[play_t2_logo]]" alt="">
          </div>
          <p>[[play_dandd]]</p>
        </div>
      </div>
      <div id="play-chat-[[play_id]]">
        <form id="play-chat-[[play_id]]-form">
          <textarea placeholder="enter comment text" required id="new_comment_text" rows="3"></textarea>
          <button type="submit" class="button">Comment</button>
        </form>
      </div>
    </script>
    {# End comment template. #}
    <!-- Live comments show here -->
  </div>
  {{ content.comment }}
</article>
